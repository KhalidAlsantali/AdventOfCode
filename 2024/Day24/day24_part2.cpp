#include <iostream>
#include <fstream>
#include <sstream>
#include <map>
#include <vector>
#include <string>
#include <queue>
#include <algorithm>
#include <cmath>

using namespace std;

void generateGraphviz(const vector<vector<string>>& instructions) {
    ofstream outFile("graph.dot");
    outFile << "digraph G {\n";
    
    for (const auto& instr : instructions) {
        string op = instr[1];
        string opNode = op + "_" + instr[3];
        
        outFile << "    \"" << instr[0] << "\" -> \"" << opNode << "\";\n";
        outFile << "    \"" << instr[2] << "\" -> \"" << opNode << "\";\n";
        outFile << "    \"" << opNode << "\" [label=\"" << op << "\"];\n";
        outFile << "    \"" << opNode << "\" -> \"" << instr[3] << "\";\n";
    }
    
    outFile << "}\n";
    outFile.close();
}

int main() {
    ifstream inputFile("input.txt");
    if (!inputFile.is_open()) {
        cerr << "Failed to open input file." << endl;
        return 1;
    }

    map<string,int> valuesMap;
    vector<vector<string>> instructions;
    string line;
    bool readingValues = true;


    while (getline(inputFile, line)) {
        if (line.empty()) {
            readingValues = false;
            continue;
        }

        if (readingValues) {
            istringstream iss(line);
            string key;
            int value;
            

            getline(iss, key, ':');
            iss >> value;
            valuesMap[key] = value;
        } else {

            size_t arrowPos = line.find("->");
            string operation = line.substr(0, arrowPos);
            string output = line.substr(arrowPos + 2);
            
            output.erase(0, output.find_first_not_of(" "));
            output.erase(output.find_last_not_of(" ") + 1);
            
            istringstream iss(operation);
            vector<string> instruction(4);
            iss >> instruction[0] >> instruction[1] >> instruction[2];
            instruction[3] = output;
            instructions.push_back(instruction);
        }
    }

    inputFile.close();

    // I did the solution to this by hand using the graph generated by this code. I might update this to make it actually programatic. 

    generateGraphviz(instructions);
    return 0;
}